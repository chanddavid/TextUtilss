{"version":3,"sources":["components/Navbarmode.js","components/Textformmode.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbarmode","props","className","mode","href","title","type","id","aboutText","onClick","toggleClick","htmlFor","text","Textformmode","useState","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","txt","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","class","role","word","lower","charAt","slice","capitalize","msg","App","newMode","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d983ba26.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbarmode(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" href=\"/about\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n\r\n                </div>\r\n                <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" onClick={props.toggleClick} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.text}</label>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n\r\n    )\r\n}\r\nNavbarmode.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}","\r\nimport React, { useState } from 'react'\r\n\r\nexport default function Textformmode(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"uppercase was clicked\" + setText);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert('Converted to Uppercase','success')\r\n\r\n    }\r\n    const handledownClick = (event) => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert('Converted to Uppercase','success')\r\n\r\n    }\r\n    // const intoTitleCase = () => {\r\n    //     let newText = text.split(\" \").map((currentValue) => {\r\n    //         let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\r\n    //         return newText;\r\n    //     });\r\n    //     setText(newText.join(\" \"));\r\n    // }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"Onchange handel\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleclearClick = (event) => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert('All text Cleared','success')\r\n\r\n\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var txt = document.getElementById('myBox');\r\n        txt.select();\r\n        navigator.clipboard.writeText(txt.value)\r\n        props.showAlert('Copied','success')\r\n\r\n    }\r\n\r\n    const handleExtraSpace = () => {\r\n        // redix\r\n        let newText = text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert('All extra spaces managed','success')\r\n\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <div className=\"my-3\">\r\n                    <div className=\"mb-3\">\r\n                        <h2>{props.heading}</h2>\r\n                        <textarea value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} className=\"form-control\" id=\"myBox\" rows=\"6\"></textarea>\r\n                    </div>\r\n                    <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                    <button className=\"btn btn-primary mx-3\" onClick={handledownClick}>Convert to Lowercase</button>\r\n                    {/* <button className=\"btn btn-primary mx-3\" onClick={intoTitleCase}>Title Case</button> */}\r\n                    <button className=\"btn btn-primary mx-3\" onClick={handleclearClick}>Clear </button>\r\n                    <button className=\"btn btn-primary mx-3\" onClick={handleCopy}>Copy Text </button>\r\n                    <button className=\"btn btn-primary mx-3\" onClick={handleExtraSpace}>Handle Extra Space </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h2>Your Text summary</h2>\r\n                <p>your text have <b>{text.split(\" \").length}</b> WORD and <b>{text.length}</b> CHARACTER\r\n                    and <b>{text.split(\".\").length - 1}</b> SENTENCE and <b>{text.split(\"\\n\").length - 1}</b> PARAGRAPH. </p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : '->Enter something to preview'}</p>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n             <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)} : </strong>{props.alert.msg}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n// import About from './components/About';\n// import Navbar from './components/Navbar';\nimport Navbarmode from './components/Navbarmode';\n// import TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Textformmode from './components/Textformmode';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  const [mode, newMode] = useState('light')\n\n  const [text, newText] = useState('Dark Mode')\n\n  const [alert, setalert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1000);\n  }\n\n  const toggleClick = () => {\n    if (mode === 'light') {\n      newMode('dark')\n      document.body.style.backgroundColor = '#042743'\n      showAlert('Dark mode activated', 'success')\n\n    }\n    else {\n      newMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert('Light mode activated', 'success')\n\n\n    }\n    newText('Light Mode')\n  }\n\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbarmode title=\"TextUtilss\" aboutText=\"About me\" mode={mode} toggleClick={toggleClick} text={text} />\n        <Alert alert={alert} />\n        {/* <Navbar title=\"TextUtilss\" aboutText=\"About me\" /> */}\n        <div className=\"container my-3\">\n          {/* <TextForm heading=\"Enter Your Text To Analyze\" /> */}\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n              <Textformmode heading=\"Enter Your Text To Analyze\" mode={mode} showAlert={showAlert} />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}